package com.internousdev.template.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
//import com.internousdev.template.dto.MyPageDTO;
import com.internousdev.template.util.DBConnector;


public class MyPageDAO {
	private DBConnector dbConnector = new DBConnector();
	private Connection connection = dbConnector.getConnection();
	private MyPageDTO myPageDTO = new MyPageDTO();

	public MyPageDTO getMyPageUserInfo(String item_transaction_id, String user_master_id) throws SQLException {
		String sql = "SELECT " +
						"item_info_transaction.item_name " +
						"user_buy_item_transaction.total_price " +
						"user_buy_item_transaction.total_count " +
						"user_buy_item_transaction.pay " +
					"FROM " +
						"user_buy_item_transaction " +
					"LEFT JOIN " +
						"item_info_transaction " +
					"ON " +
						"user_buy_item_transaction.item_transaction_id = item_info_transaction" +
					"WHERE " +
						"user_buy_item_transaction.item_transaction_id = ? " +
					"AND " +
						"user_buy_item_transaction.user_master_id = ? " +
					"ORDER BY " +
						"user_buy_item_transaction.insert_date DESC";

		try {
			PreparedStatement prepareStatement = connection.prepareStatement(sql);
			prepareStatement.setString(1, item_transaction_id);
			prepareStatement.setString(2, user_master_id);
			ResultSet resultSet = prepareStatement.executeQuery();

			if(resultSet.next()) {
				myPageDTO,setItemName(resultSet.getString("item_name"));
				myPageDTO.setTotalPrice(resultSet.getString("total_price"));
				myPageDTO.setTotalCount(resultSet.getString("total_count"));
				myPageDTO.setPayment(resultSet.getString("pay"));
			}
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			connection.close();
		}
		return myPageDTO;
	}

	public int buyItemHistoryDelete(String item_transaction_id, String user_master_id) throws SQLException {
		String sql = "DELETE FROM user_buy_item_transaction WHERE item_transaction_id = ? AND user_master_id = ?";
		PreparedStatement preparedStatement;
		int result = 0;
		try {
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, item_transaction_id);
			preparedStatement.setString(2, user_master_id);

			result = preparedStatement.executeUpdate();
		}catch(SQLException e) {
			e.printStackTrace();
		}finally {
			connection.close();
		}
		return result;
	}
}
